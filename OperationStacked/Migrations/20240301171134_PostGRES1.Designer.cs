// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OperationStacked.Data;

#nullable disable

namespace OperationStacked.Migrations
{
    [DbContext(typeof(OperationStackedContext))]
    [Migration("20240301171134_PostGRES1")]
    partial class PostGRES1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OperationStacked.Entities.EquipmentStack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("IncrementCount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("IncrementValue")
                        .HasColumnType("numeric");

                    b.Property<string>("InitialIncrements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("StartWeight")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStacks");
                });

            modelBuilder.Entity("OperationStacked.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("integer");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OperationStacked.Entities.ExerciseHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompletedReps")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CompletedSets")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TemplateExerciseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WorkingWeight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseHistory");
                });

            modelBuilder.Entity("OperationStacked.Entities.LinearProgressionExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentAttempt")
                        .HasColumnType("integer");

                    b.Property<int>("LiftWeek")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("WeightIndex")
                        .HasColumnType("integer");

                    b.Property<decimal>("WorkingWeight")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WorkoutExerciseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutExerciseId");

                    b.ToTable("LinearProgressionExercise");
                });

            modelBuilder.Entity("OperationStacked.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CognitoUserId")
                        .HasMaxLength(255)
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentDay")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentWeek")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkoutDaysInWeek")
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutWeeks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OperationStacked.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkoutName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("OperationStacked.Entities.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptsBeforeDeload")
                        .HasColumnType("integer");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EquipmentStackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("LiftDay")
                        .HasColumnType("integer");

                    b.Property<int>("LiftOrder")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumReps")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumReps")
                        .HasColumnType("integer");

                    b.Property<int>("RestTimer")
                        .HasColumnType("integer");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<int>("Template")
                        .HasColumnType("integer");

                    b.Property<decimal>("WeightProgression")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("OperationStacked.Entities.A2SHypertrophyExercise", b =>
                {
                    b.HasBaseType("OperationStacked.Entities.Exercise");

                    b.Property<int>("AmrapRepResult")
                        .HasColumnType("integer");

                    b.Property<int>("AmrapRepTarget")
                        .HasColumnType("integer");

                    b.Property<int>("Block")
                        .HasColumnType("integer");

                    b.Property<decimal>("Intensity")
                        .HasColumnType("numeric");

                    b.Property<bool>("PrimaryLift")
                        .HasColumnType("boolean");

                    b.Property<int>("RepsPerSet")
                        .HasColumnType("integer");

                    b.Property<decimal>("RoundingValue")
                        .HasColumnType("numeric");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<decimal>("TrainingMax")
                        .HasColumnType("numeric");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.ToTable("A2SHypertrophyExercise");
                });

            modelBuilder.Entity("OperationStacked.Entities.ExerciseHistory", b =>
                {
                    b.HasOne("OperationStacked.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseHistories")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("OperationStacked.Entities.LinearProgressionExercise", b =>
                {
                    b.HasOne("OperationStacked.Entities.WorkoutExercise", "WorkoutExercise")
                        .WithMany("LinearProgressionExercises")
                        .HasForeignKey("WorkoutExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("OperationStacked.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("OperationStacked.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("OperationStacked.Entities.A2SHypertrophyExercise", b =>
                {
                    b.HasOne("OperationStacked.Entities.Exercise", null)
                        .WithOne()
                        .HasForeignKey("OperationStacked.Entities.A2SHypertrophyExercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperationStacked.Entities.Exercise", b =>
                {
                    b.Navigation("ExerciseHistories");
                });

            modelBuilder.Entity("OperationStacked.Entities.WorkoutExercise", b =>
                {
                    b.Navigation("LinearProgressionExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
